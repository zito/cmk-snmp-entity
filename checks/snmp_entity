#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim:sta:si:sw=4:sts=4:et:
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# The Check_MK official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using a Cisco appliances...
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2014 |
# +------------------------------------------------------------------+


def filter_chassis(info):
    return map(lambda item: item[2:],
            filter(lambda item: item[0] == '3' or item[1] == 'Chassis', info))

def inventory_snmp_entity(info):
    chassis = filter_chassis(info)
    if len(chassis) == 0:
        return
    return [ (None, chassis) ]

def check_snmp_entity(item, params, info):
    chassis = filter_chassis(info)
    params.extend([(None, None)] * (len(chassis) - len(params)))
    chassis.extend([(None, None)] * (len(params) - len(chassis)))
    t = []
    status = 0
    ts = "OK"
    for item, item_inv in zip(chassis, params):
        el = []
        for v, v_inv in zip(item, item_inv):
            if v == v_inv:
                s = v
            else:
                s = "%s <> %s (!!)" % (v, v_inv)
                status = 2
                ts = "CRIT"
            el.append(s)
        t.append("(" + ", ".join(el) + ")")
    return (status, ts + " - ModelName, Serial: " + ", ".join(t))


check_info['snmp_entity'] = (check_snmp_entity,
            'SNMP Entity', 0, inventory_snmp_entity)

snmp_info['snmp_entity'] = ('.1.3.6.1.2.1.47.1.1.1.1', [
        '5',  # ENTITY-MIB::entPhysicalClass
        '7',  # ENTITY-MIB::entPhysicalName
        '13', # ENTITY-MIB::entPhysicalModelName
        '11', # ENTITY-MIB::entPhysicalSerialNum
    ])

snmp_scan_functions['snmp_entity'] = lambda oid: \
        oid(".1.3.6.1.2.1.47.1.1.1.1.11.*") != None  # ENTITY-MIB::entPhysicalSerialNum
